# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MyFbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TestTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTestTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TestTable()
        x.Init(buf, n + offset)
        return x

    # TestTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TestTable
    def FieldA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TestTable
    def FieldB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def TestTableStart(builder): builder.StartObject(2)
def TestTableAddFieldA(builder, fieldA): builder.PrependUint8Slot(0, fieldA, 0)
def TestTableAddFieldB(builder, fieldB): builder.PrependUint8Slot(1, fieldB, 0)
def TestTableEnd(builder): return builder.EndObject()
