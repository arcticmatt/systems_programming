#
# Run:
# ./../../flatbuffers/flatc --python ../simple.fbs
# 
import sys
# Kinda jank, but fine for demo code.
sys.path.append("../../flatbuffers/python/")
import flatbuffers

# Generated by `flatc`.
import MyFbs.TestStruct as ts
import MyFbs.TestTable as tt

if __name__ == "__main__":
    with open('../../test_struct_binary.out', 'rb') as file: 
        contents = file.read()
        print 'test_struct_binary.out file contents =', repr(contents)
        buf = bytearray(contents)
        test_struct = ts.TestStruct()
        test_struct.Init(buf, 0)
        print 'TestStruct a =', test_struct.FieldA()
        print 'TestStruct b =', test_struct.FieldB()

    with open('../../test_struct_as_root_binary.out', 'rb') as file: 
        contents = file.read()
        print 'test_struct_as_root_binary.out file contents =', repr(contents)
        buf = bytearray(contents)
        # Mimic code in GetRootAsTestTable
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, 0)
        print 'n =', n
        test_struct = ts.TestStruct()
        test_struct.Init(buf, n)
        print 'TestStruct a =', test_struct.FieldA()
        print 'TestStruct b =', test_struct.FieldB()

    with open('../../test_table_binary.out', 'rb') as file: 
        contents = file.read()
        print 'test_table_binary.out file contents =', repr(contents)
        buf = bytearray(contents)
        test_table = tt.TestTable.GetRootAsTestTable(buf, 0)
        print 'TestTable a =', test_table.FieldA()
        print 'TestTable b =', test_table.FieldB()
