// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLE_MYFBS_H_
#define FLATBUFFERS_GENERATED_SIMPLE_MYFBS_H_

#include "flatbuffers/flatbuffers.h"

namespace MyFbs {

struct TestStruct;

struct TestTable;
struct TestTableBuilder;
struct TestTableT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) TestStruct FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t field_a_;
  uint8_t field_b_;

 public:
  TestStruct() {
    memset(static_cast<void *>(this), 0, sizeof(TestStruct));
  }
  TestStruct(uint8_t _field_a, uint8_t _field_b)
      : field_a_(flatbuffers::EndianScalar(_field_a)),
        field_b_(flatbuffers::EndianScalar(_field_b)) {
  }
  uint8_t field_a() const {
    return flatbuffers::EndianScalar(field_a_);
  }
  uint8_t field_b() const {
    return flatbuffers::EndianScalar(field_b_);
  }
};
FLATBUFFERS_STRUCT_END(TestStruct, 2);

struct TestTableT : public flatbuffers::NativeTable {
  typedef TestTable TableType;
  uint8_t field_a;
  uint8_t field_b;
  TestTableT()
      : field_a(0),
        field_b(0) {
  }
};

struct TestTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestTableT NativeTableType;
  typedef TestTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD_A = 4,
    VT_FIELD_B = 6
  };
  uint8_t field_a() const {
    return GetField<uint8_t>(VT_FIELD_A, 0);
  }
  uint8_t field_b() const {
    return GetField<uint8_t>(VT_FIELD_B, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FIELD_A) &&
           VerifyField<uint8_t>(verifier, VT_FIELD_B) &&
           verifier.EndTable();
  }
  TestTableT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TestTableT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TestTable> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TestTableT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TestTableBuilder {
  typedef TestTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field_a(uint8_t field_a) {
    fbb_.AddElement<uint8_t>(TestTable::VT_FIELD_A, field_a, 0);
  }
  void add_field_b(uint8_t field_b) {
    fbb_.AddElement<uint8_t>(TestTable::VT_FIELD_B, field_b, 0);
  }
  explicit TestTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestTableBuilder &operator=(const TestTableBuilder &);
  flatbuffers::Offset<TestTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestTable> CreateTestTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t field_a = 0,
    uint8_t field_b = 0) {
  TestTableBuilder builder_(_fbb);
  builder_.add_field_b(field_b);
  builder_.add_field_a(field_a);
  return builder_.Finish();
}

flatbuffers::Offset<TestTable> CreateTestTable(flatbuffers::FlatBufferBuilder &_fbb, const TestTableT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TestTableT *TestTable::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<MyFbs::TestTableT> _o = std::unique_ptr<MyFbs::TestTableT>(new TestTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TestTable::UnPackTo(TestTableT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = field_a(); _o->field_a = _e; }
  { auto _e = field_b(); _o->field_b = _e; }
}

inline flatbuffers::Offset<TestTable> TestTable::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TestTableT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTestTable(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TestTable> CreateTestTable(flatbuffers::FlatBufferBuilder &_fbb, const TestTableT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TestTableT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _field_a = _o->field_a;
  auto _field_b = _o->field_b;
  return MyFbs::CreateTestTable(
      _fbb,
      _field_a,
      _field_b);
}

}  // namespace MyFbs

#endif  // FLATBUFFERS_GENERATED_SIMPLE_MYFBS_H_
